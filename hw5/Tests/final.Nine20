#!/usr/bin/perl -w

use strict;
my $debug = 0;

my $CLASS  = "223";
my $HWK    = "5";
my $NAME   = "Nine20";          # Name of program
my $TEST   = "tIJ";             # Name of test file (IJ is replaced by number)
my $ANSWER = "tIJ.N";           # Name of answer file (IJ is replaced by number)
my $DATE   = "04/28/20";        # Date script written
my $LANG   = "C";               # Language (C, Perl, ...)

# Blank-separated list of illegal files; wildcards permitted
my $hwkFiles = "Deque.h";

my $PROGRAM = "./$NAME";        # Name of executable

my %WHICH;                      # Allow individual tests on command line
@WHICH{@ARGV}++
   if (@ARGV);

my @UNLINK;                                     # Files to delete on signal
$SIG{HUP} = $SIG{INT} = $SIG{QUIT}
   = $SIG{TERM} = \&cleanup;
my $TMPDIR = "/tmp/TEST.$NAME.$$";              # Name of temporary directory
sub cleanup {
   unlink (@UNLINK);                            # Delete files
   if (-e $TMPDIR) {                            # Delete temporary directory
      system ("/bin/chmod -R +w $TMPDIR");
      system ("/bin/rm -rf $TMPDIR");
   }
   exit;
}

$0 =~ s{^.*/}{};                                # Extract test type
my $TYPE = ($0 =~ m{^test\.}) ? "Public" : "Final";
print "\n$TYPE test script for $NAME ($DATE)\n\n";

&makeProgram
   unless ($LANG eq "Perl");

my $TimeOut = "";                               # Command to force timeout

&limitCpuTime (8);                              # Limit CPU-time per process
&limitWallClock (16);                           # Limit wall-clock per process
&limitFileSize (100000);                        # Limit size of files created
&limitHeapSize (8000000);                       # Limit size of heap

$|++;
print "\nEach test is either passed or failed; there is no partial credit.\n\n"
    . "To execute the test labelled IJ, type the command:\n"
    . "     /c/cs$CLASS/Hwk${HWK}/Tests/$TEST\n"
#   . "     $PROGRAM < /c/cs$CLASS/Hwk${HWK}/Tests/$TEST\n"
    . "or the command\n"
    . "     $0 IJ\n"
    . "The answer expected is in /c/cs$CLASS/Hwk${HWK}/Tests/$ANSWER.\n\n";

my $total = 0;

&header ('One-Move Problems');
$total += &runTest ('01', 'Single moves to center');
$total += &runTest ('02', 'Single moves to side');
$total += &runTest ('03', 'Single moves to corner');

&header ('3x3 Problems');
$total += &runTest ('04', 'Very short 3x3 problems (< 7 moves)');
$total += &runTest ('05', 'Short 3x3 problems (< 16 moves)');
$total += &runTest ('06', '3x3 problem with no solution');

&header ('HEIGHT x WIDTH Problems');
$total += &runTest ('07', 'Short 2x2 problems');
$total += &runTest ('08', '2x2 problem with no solution');
$total += &runTest ('09', '2x3 problem with no solution in 10 moves');

&header ('Error Detection');
$total += &runTest ('10', 'Incompatible initial and goal (error)');
$total += &runTest ('11', 'Invalid MAXSTEPS (error)');
$total += &runTest ('12', 'INITIAL = GOAL with no blank square (error)');

&header ('Stress');
$total += &runTest ('13', 'Limit space per hash table entry');

&header ('Reachability');
$total += &runTest ('14', 'Reachability: Short 3 x 3 problems');

print "\nEnd of Public Script\n\n";

&header ('Reachability');
$total += &runTest ('15', 'Reachability: 2 x 3 with no solution in 10 moves');

&header ('3x3 Problems');
$total += &runTest ('16', 'Short problems (< 16 moves)');
$total += &runTest ('17', 'Medium problems (< 20 moves)');
$total += &runTest ('18', 'Long problems (< 25 moves)');
$total += &runTest ('19', 'Very long problems');

&header ('HEIGHT x WIDTH Problems');
$total += &runTest ('20', 'Short 2x4 problems');
$total += &runTest ('21', '3x4 and 4x3 problems');
$total += &runTest ('22', '4x4 problem');
$total += &runTest ('23', 'Long 4x4 problems');
$total += &runTest ('24', '2x5 and 5x2 problems');

&header ('Error Detection');
$total += &runTest ('25', 'Invalid HEIGHT (error)');
$total += &runTest ('26', 'Invalid WIDTH (error)');
$total += &runTest ('27', 'INITIAL = GOAL with two blank squares (error)');
$total += &runTest ('28', 'INITIAL = GOAL wrong length (error)');
$total += &runTest ('29', 'INITIAL & GOAL different lengths');
$total += &runTest ('30', 'INITIAL = aaaa-bbbb; GOAL = aaa-bbbbb (error)');
$total += &runTest ('31', 'INITIAL or GOAL with no blank square (error)');
$total += &runTest ('32', 'Incorrect number of arguments (error)');
$total += &runTest ('33', 'Illegal option (error)');

&header ('Stress');
$total += &runTest ('34', 'INITIAL = GOAL');
$total += &runTest ('35', 'MAXSTEPS = 0, INITIAL = GOAL');
$total += &runTest ('36', 'Solution with exact number of moves');
$total += &runTest ('37', 'INITIAL = aaaa-bbbb; GOAL = bbbb-aaaa');

&header ('Reachability');
$total += &runTest ('38', 'Reachability: Incompatible / invalid (error)');

&header ('Other');
$total += &runTest ('39', 'Limit space per hash table entry (< 1000 positions)');
$total += &runTest ('40', '5x5 problem');

# &header ('Deductions for Violating Specification (0 => no violation)');
# $total += &runTest ('41', 'No rehashing?', 'Deduct=5');

printf ("\n%3d points Total for $NAME\n", $total);

# &header ('Deductions for Violating Specification (0 => no violation)');
# $total += &runTest ('41', 'No rehashing?', 'Deduct=5');

# $total += &runTest ('39n', 'MAXSTEPS / HEIGHT / WIDTH is "" (error)');

if ($TYPE eq "Final") {
   print "\n";
   system ("rm -f $PROGRAM *.o")                # Cleanup if final script
      unless ($LANG eq "Perl");
}

if ($TYPE eq "Public") {                        # Reminder to students
   system ("/c/cs$CLASS/bin/checklog -noprint");
   system ("/c/cs$CLASS/bin/checkmake -noprint")
      unless ($LANG eq "Perl");
}

exit $total;


##########
# Print section header for tests
sub sectionHeader {
   printf ("\n%11s%s\n", "", @_);
}


##########
# Print header for tests
sub header {
   printf ("\n%15s%s\n", "", @_);
}


##########
# Print addition
sub addition {
   my ($points, $title) = @_;
   printf ("%3d point       $title\n", $points);
   return $points;
}


##########
# Print deduction
sub deduction {
   my ($points, $title) = @_;
   printf ("%3d point       $title\n", $points);
   return $points;
}


##########
# Print possible deduction
sub possibleDeduction {
   printf ("%18d %s\n", @_);
}


##########
# Run a test
sub runTest {
   my ($test, $title, $conds) = @_;
   my $where   = "/c/cs$CLASS/Hwk$HWK/Tests";   # Where to find test files
   my $run     = "/c/cs$CLASS/bin/run";         # Utility to run program
   my $diff    = "/usr/bin/diff";               # Utility to compare files
   my $head    = "/c/cs$CLASS/bin/Head";        # Utility to output files
   my $results = "/tmp/$NAME.$$";               # Results of test
   my $diffs   = "/tmp/diff.$$";                # Expected results vs. results
   my $errors  = "/tmp/errs.$$";                # Error messages generated
   my ($status, @conds, $points);

   my $testFile = "$where/$TEST";               # Name of test file
   $testFile    =~ s{IJ}{$test};
   my $answers  = "$where/$ANSWER";             # Name of answer file
   $answers     =~ s{IJ}{$test};

   return 0                                     # Either execute all tests or
      unless (keys %WHICH == 0                  #   only those on command line
	      || exists $WHICH{$test});

   (-r $testFile)
      || die ("$0: missing test file $testFile\n");

   push @UNLINK, $results, $errors, $diffs;     # Files to delete on signal

   if (-x $testFile) {
      $status = execute ($testFile, undef, $results, $errors);
   } elsif ($LANG eq "Perl") {
      $status = execute ($PROGRAM, $testFile, $results, $errors);
   } else {
      $status = execute ("$run $PROGRAM", $testFile, $results, $errors);
   }

   if (defined $conds && $conds eq "Graceful") {
      @conds = ('NORMAL', $status);
   } else {
      (-r $answers)
	 || die ("$0: missing answer file $answers\n");
      system ("$diff $answers $results  > $diffs  2>> $errors");
      system ("$head $errors $diffs");
      @conds = ('NULL', $errors,  'NULL', $diffs);
   }

   if (defined $conds && $conds eq "Error message") {
      @conds = ('NONNULL', $errors,  'NULL', $diffs);
   }

   if (defined $conds && $conds =~ m{^Deduct=(\d+)$}) {
      @conds = ('DEDUCT', $1, @conds);
   }

   $points = &correct (@conds);
   printf ("%3d point  %3s. %s\n", $points, $test, $title);
   system ("rm -f $results $errors $diffs");
   pop @UNLINK;  pop @UNLINK;  pop @UNLINK;     # Remove added files

   return $points;
}


##########
#  correct ({[UNOP FILE] | ['NORMAL' STATUS]}*)
#
#  Return 1 if the conjunction of the specified tests is true, else 0, where:
#
#    UNOP FILE (where UNOP is either 'NULL' or 'NONNULL'):
#      Is the size of the file FILE as specified?
#
#    'NORMAL' STATUS:
#      Did the process terminate normally?
#
#    'DEDUCT' POINTS:
#      Change the point values to 0 for success, -POINTS for failure
#
sub correct {
   my $op;
   my ($success, $failure) = (1, 0);

   while ($op = shift) {
      if ($op eq 'NULL') {
	 my $arg = shift;
	 print STDERR "$op $arg\n" if $debug;
	 if (-s $arg) {
	    if ($arg =~ m{/diff\.}) {
	       print "Error: STDOUT differs from expected\n";
	    } elsif ($arg =~ m{/errs\.}) {
	       print "Error: STDERR should be empty\n";
	    } else {
	       print "Error: File $arg is nonempty\n";
	    }
	    return $failure;
	 }

      } elsif ($op eq 'NONNULL') {
	 my $arg = shift;
	 print STDERR "$op $arg\n" if $debug;
	 if (!-s $arg) {
	    if ($arg =~ m{/errs\.}) {
	       print "Error: STDERR should be nonempty\n";
	    } else {
	       print "Error: File $arg is empty\n";
	    }
	    return $failure;
	 }

      } elsif ($op eq 'NORMAL') {
	 my $arg = 127 & shift;
	 print STDERR "$op $arg\n" if $debug;
	 if ($arg != 0) {
	    print "Error: Status = $arg is nonzero\n";
	    return $failure;
	 }

      } elsif ($op eq 'DEDUCT') {
	 my $arg = shift;
	 ($success, $failure) = (0, -$arg);
      }
   }
   return $success;
}


##########
# Create program to test
sub makeProgram {
#  system ("rm -f $PROGRAM");                   # Delete program & object files
#  system ("rm -f *.o")
#     if ($TYPE eq "Final");

   (-f "Makefile" || -f "makefile")             # Give warning if no Makefile
      || warn ("$0: no makefile found\n");

   system ("/c/cs223/bin/makewarn $PROGRAM");
   ($? == 0)
      || die ("$0: cannot compile $PROGRAM\n");

   for my $p (split (" ", $PROGRAM)) {
      -e $p
	 || die ("$0: could not make $p\n");
   }
}


##########
# Limit CPU-time, wall-clock-time, file-size, and/or heap-size
use BSD::Resource;

sub limitCpuTime { # (time in seconds)
   my ($soft, $hard) = @_;
   $hard = $soft
      if (! defined($hard));
   setrlimit (RLIMIT_CPU, $soft, $hard);
}

sub limitWallClock { # (time in seconds)
   my ($wall) = @_;                             # TERM after WALL seconds;
   $TimeOut = "timeout -k $wall $wall";         #   KILL after 2*WALL seconds
}

sub limitFileSize { # (size in kilobytes)
   my ($size) = @_;
   $size *= 1024;
   setrlimit (RLIMIT_FSIZE, $size, $size);
}

sub limitHeapSize { # (size in kilobytes        # Bug: Has no effect
   my ($size) = @_;
   $size *= 1024;
   setrlimit (RLIMIT_VMEM, $size, $size);
}

sub limitProcesses { # (#processes)             # Bug: Has no effect
   my ($nproc) = @_;
   setrlimit (RLIMIT_NPROC, $nproc, $nproc);
}


##########
# Execute program after redirecting stdin, stdout, & stderr and return status
sub execute {
   my ($program, $stdin, $stdout, $stderr) = @_;
   my ($pid, $status);

   (defined ($pid = fork))                      # Create child process
      || die ("$0: fork failed\n");

   if ($pid == 0) {                             # Child process
      open (STDIN, "<$stdin")                   #  Redirect stdin
	 if (defined $stdin);
      open (STDOUT, ">$stdout")                 #  Redirect stdout
	 if (defined $stdout);
      open (STDERR, ">$stderr")                 #  Redirect stderr
	 if (defined $stderr);
      mkdir ($TMPDIR)                           #  Create a temporary directory
	 || die ("$0: mkdir $TMPDIR failed\n");
      system ("/bin/cp $PROGRAM $TMPDIR");      #    With a copy of the program
      chdir ("$TMPDIR")                         #    And cd there
	 || die ("$0: chdir $TMPDIR failed\n");
      (exec "$TimeOut $program")                #  Execute command
	 ||  die ("$0: exec failed\n");
   }

   waitpid ($pid, 0);                           # Wait for child to die,
   $status = $?;

   system ("/bin/chmod -R +w $TMPDIR");         # Delete temporary directory
   system ("/bin/rm -rf $TMPDIR");
   (! -e $TMPDIR)
      || die ("$0: cannot delete $TMPDIR\n");

   return $status;                              # ... and return exit status
}


##########
# $FILES is a blank-separated list of filenames which may include wildcards.
# If any of these files exist in the current working directory, print their
# names and return -1; else return 0.
sub localCopies { # ($files)
   my ($files) = @_;
   open (LS, "ls -l $files 2>/dev/null |")
       || die ("$0: cannot ls -l $files\n");
   my @ls = <LS>;
   close (LS);
   print @ls;
   return (@ls > 0) ? -1 : 0;
}
